---
permalink: /service-worker.js
eleventyExcludeFromCollections: true
---
// service-worker.js for Sat7a Hydraulic App
// Cache management strategy: Cache First then Network (for static assets)

const CACHE_NAME = 'sat7a-hydraulic-cache-v{{ buildDate | date("yyyyMMddHHmmss") }}'; // Dynamic cache name based on build date
const ASSETS_TO_CACHE = [
    '/', // Homepage
    '/index.html',
    '/order/', // Order page
    '/order.html',
    '/contact/', // Contact page
    '/contact.html',
    '/about/', // About page
    '/about.html',
    // --- Static assets (CSS, JS, Images) ---
    '/assets/css/style.css', // Assuming you have a main CSS file
    '/assets/js/main.js',    // Assuming you have a main JS file
    '/assets/images/logo.png', // Example logo
    '/assets/images/hero-bg.jpg', // Hero image from index.md
    '/assets/images/how-it-works.svg', // How it works image from index.md
    // --- External resources (CDNs) ---
    'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css',
    'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css',
    // You might also want to cache relevant fonts from Google Fonts or others if used
    // 'https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap',
];

// Install event: Fired when the service worker is installed
self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('[Service Worker] Caching all app assets');
                return cache.addAll(ASSETS_TO_CACHE);
            })
            .catch((error) => {
                console.error('[Service Worker] Failed to cache assets:', error);
            })
    );
});

// Activate event: Fired when the service worker becomes active
self.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((name) => {
                    if (name !== CACHE_NAME) {
                        console.log('[Service Worker] Deleting old cache:', name);
                        return caches.delete(name);
                    }
                })
            );
        })
    );
});

// Fetch event: Fired when the browser requests a resource
self.addEventListener('fetch', (event) => {
    // Only cache GET requests (to avoid issues with form submissions)
    if (event.request.method !== 'GET') {
        return;
    }

    event.respondWith(
        caches.match(event.request).then((cachedResponse) => {
            // Return cached response if found
            if (cachedResponse) {
                return cachedResponse;
            }

            // Fallback to network if not in cache
            return fetch(event.request).then((networkResponse) => {
                // Check if we received a valid response
                if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
                    return networkResponse;
                }

                // Clone the response because it's a stream and can only be consumed once
                const responseToCache = networkResponse.clone();

                // Cache the fetched resource
                caches.open(CACHE_NAME).then((cache) => {
                    cache.put(event.request, responseToCache);
                });

                return networkResponse;
            }).catch(() => {
                // This catch block handles network errors (e.g., user is offline)
                // You can serve an offline page here if needed
                // For example:
                // if (event.request.mode === 'navigate') {
                //     return caches.match('/offline.html'); // Assuming you have an offline.html
                // }
                console.log('[Service Worker] Fetch failed for:', event.request.url);
            });
        })
    );
});

// --- Registering the Service Worker in your HTML (e.g., in base.njk) ---
// You will need a small script in your base.njk to register this service worker.
// Example:
/*
<script>
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('Service Worker registered with scope:', registration.scope);
                })
                .catch(err => {
                    console.log('Service Worker registration failed:', err);
                });
        });
    }
</script>
*/

